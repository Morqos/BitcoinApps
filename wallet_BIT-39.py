# Very very simple implementation of the BIP-39 Bitcoin wallet standard (YET TO COMPLETE)
# 
# Original source code "mnemonic.py" from mnemonic/mnemonic.py
# from https://github.com/trezor/python-mnemonic


import bisect
import hashlib
import hmac
import itertools
import os
from typing import AnyStr, List, Sequence, TypeVar, Union
import unicodedata

wordlist = [];


def _get_directory():
    return os.path.join(os.path.dirname(__file__), "wordlist");


def setWordList(language):
    radix = 2048;
    with open( "%s/%s.txt" % (_get_directory(), language), "r", encoding="utf-8" ) as f:
        for w in f.readlines():
            wordlist.append(w.strip());
            
    if len(wordlist) != radix:
        raise ConfigurationError(
            "Wordlist should contain %d words, but it contains %d words." % (radix, len(wordlist))
        )

# This method returns a string which represents random bytes suitable for cryptographic use
def generate(strength: int = 128):
    if strength not in [128, 160, 192, 224, 256]:
        raise ValueError(
            "Strength should be one of the following [128, 160, 192, 224, 256], but it is not (%d)."
            % strength
        )
    return os.urandom(strength // 8);


def to_mnemonic(data: bytes):
    if len(data) not in [16, 20, 24, 28, 32]:
        raise ValueError(
            "Data length should be one of the following: [16, 20, 24, 28, 32], but it is not (%d)."
            % len(data)
        )

    # Checksum
    checksum = hashlib.sha256(data).hexdigest()

    # [:2] - from beginning to 2 (excluded)
    # [2:] - from position 2 (included) to the end
    # zfill(len): adds zeros at the beginning of the string, until it reaches the total length is == len


    # 132 bits string - entropy :: first (entropy.length()/32) bits of Checksum
    b = (
        bin(int.from_bytes(data, byteorder="big"))[2:].zfill(len(data) * 8)
        + bin(int(checksum, 16))[2:].zfill(256)[: len(data) * 8 // 32]
    )

    print("Entropy + checksum (first 4 bits): \n    " + b + "\n");
    
    result = []
    
    for i in range(len(b) // 11):
        idx = int(b[i * 11 : (i + 1) * 11], 2)
        result.append(wordlist[idx])

    result_phrase = " ".join(result)
    return result_phrase



# FROM MNEMONIC TO SEED



def main():

    setWordList("english")
    
    # generates randomly the string of bytes
    byteString = generate();
    print("The randomly generated byte string is: \n    " + str(byteString) + "\n");

    mnemonicWords = to_mnemonic(byteString)
    print("The mnemonic words generated are: \n    " + mnemonicWords + "\n");


if __name__ == "__main__":
    main()
